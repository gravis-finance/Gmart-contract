{
  "address": "0xd31000468Ef3aa1D096234ea191f3a5e77415360",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_stables",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_types",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OrderCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "OrderFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "OrderPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "OrderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_userIndexes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allowedStables",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allowedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allowedTypes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenType",
          "type": "uint256"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_list",
          "type": "address[]"
        }
      ],
      "name": "changeAllowedStables",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_list",
          "type": "address[]"
        }
      ],
      "name": "changeAllowedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_list",
          "type": "uint256[]"
        }
      ],
      "name": "changeAllowedTypes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "changeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "changeFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_maker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_stable",
          "type": "address"
        }
      ],
      "name": "fillOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOrders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nft",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenType",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct GravisTradingPost.Order[]",
          "name": "orders",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_maker",
          "type": "address"
        }
      ],
      "name": "getOrdersByMaker",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nft",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenType",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct GravisTradingPost.Order[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc",
          "type": "address"
        }
      ],
      "name": "isStableAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isTokenAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        }
      ],
      "name": "isTypeAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isUserExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "placeOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "updateOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x30a9eb6d8a739c67d7d609e997df6080f6cbc8a22395e1300582defe7c294f6d",
  "receipt": {
    "to": null,
    "from": "0xd986b2729416ffDFAF2fa0e4E6b5a2453cf6C323",
    "contractAddress": "0xd31000468Ef3aa1D096234ea191f3a5e77415360",
    "transactionIndex": 2,
    "gasUsed": "2584103",
    "logsBloom": "0x00000000000000000000000400000000000000000000000000a00000000000000000000000000000000800000000000000000000000000002000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000200000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xcd21b702b9ba2e54660f1bfd2a67f9acefd17bdf196064dc58df6bb87037d38c",
    "transactionHash": "0x30a9eb6d8a739c67d7d609e997df6080f6cbc8a22395e1300582defe7c294f6d",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 10134455,
        "transactionHash": "0x30a9eb6d8a739c67d7d609e997df6080f6cbc8a22395e1300582defe7c294f6d",
        "address": "0xd31000468Ef3aa1D096234ea191f3a5e77415360",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d986b2729416ffdfaf2fa0e4e6b5a2453cf6c323"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xcd21b702b9ba2e54660f1bfd2a67f9acefd17bdf196064dc58df6bb87037d38c"
      }
    ],
    "blockNumber": 10134455,
    "cumulativeGasUsed": "3685517",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd986b2729416ffDFAF2fa0e4E6b5a2453cf6C323",
    300,
    [
      "0xd859Bc152D041B4B6486e55F8635473b86F3b4ee"
    ],
    [
      "0x4a291477C8901672BCa0E4d2bF391587276A4a37",
      "0x3e919A1284A374260D99276672D354fDe2a09Cc0",
      "0x252271ab394549a8784292cf8dEe184260f0B2Bb"
    ],
    [
      0,
      1,
      2
    ]
  ],
  "solcInputHash": "7442c7403818f56429e73beaef0ba123",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_stables\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_types\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"OrderPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"OrderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_userIndexes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedStables\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenType\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_list\",\"type\":\"address[]\"}],\"name\":\"changeAllowedStables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_list\",\"type\":\"address[]\"}],\"name\":\"changeAllowedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_list\",\"type\":\"uint256[]\"}],\"name\":\"changeAllowedTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"changeFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stable\",\"type\":\"address\"}],\"name\":\"fillOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct GravisTradingPost.Order[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getOrdersByMaker\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct GravisTradingPost.Order[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc\",\"type\":\"address\"}],\"name\":\"isStableAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"isTypeAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"placeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changeAllowedStables(address[])\":{\"details\":\"Change the protocol allowed stables (owner only)\",\"params\":{\"_list\":\"Array of allowed stable addresses\"}},\"changeAllowedTokens(address[])\":{\"details\":\"Change the protocol allowed tokens (owner only)\",\"params\":{\"_list\":\"Array of allowed token addresses\"}},\"changeAllowedTypes(uint256[])\":{\"details\":\"Change the protocol allowed token types (owner only)\",\"params\":{\"_list\":\"Array of allowed token types\"}},\"changeFee(uint256)\":{\"details\":\"Change the fee paid to the protocol (owner only)\",\"params\":{\"_fee\":\"New fee to set in basis points\"}},\"changeFeeRecipient(address)\":{\"details\":\"Change the protocol fee recipient (owner only)\",\"params\":{\"_recipient\":\"New protocol fee recipient address\"}},\"isStableAllowed(address)\":{\"details\":\"Check that erc token is in the allowed list\",\"params\":{\"_erc\":\"Address of token\"}},\"isTokenAllowed(address)\":{\"details\":\"Check that nft token is in the allowed list\",\"params\":{\"_token\":\"Address of token\"}},\"isTypeAllowed(uint256)\":{\"details\":\"Check that type of nft token is in the allowed list\",\"params\":{\"_type\":\"Type of NFT token\"}},\"isUserExists(address)\":{\"details\":\"Check that user is already in the index, i.e. placed any order\",\"params\":{\"_user\":\"Address of user\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pause all activity of contract orders (owner only)\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpause all activity of contract orders (owner only)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GravisTradingPost.sol\":\"GravisTradingPost\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC721Receiver.sol\\\";\\n\\n  /**\\n   * @dev Implementation of the {IERC721Receiver} interface.\\n   *\\n   * Accepts all token transfers. \\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n   */\\ncontract ERC721Holder is IERC721Receiver {\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xdb2133d55b8f3a94313af8f4371ae0501a58e412d471b03d8581214c5ea2ce33\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x52146049d6709c870e8ddcd988b5155cb6c5d640cfcd8978aee52bc1ba2ec4eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/GravisTradingPost.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/Pausable.sol';\\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/ERC721Holder.sol';\\nimport './interfaces/IGravisCollectible.sol';\\n\\ncontract GravisTradingPost is ERC721Holder, Ownable, Pausable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant FEE_BASE = 10000;\\n\\n    // Recipient of fees.\\n    address public feeRecipient;\\n\\n    // Fee amount in basis points\\n    uint256 public feeAmount;\\n\\n    struct Order {\\n        // Order maker\\n        address maker;\\n        // Gravis NFT contract instance.\\n        address nft;\\n        // Gravis NFT token type ID.\\n        uint256 tokenType;\\n        // Amount of NFTs for this order.\\n        uint256 amount;\\n        // Price for each token.\\n        uint256 price;\\n    }\\n\\n    address[] public allowedTokens;\\n    address[] public allowedStables;\\n    uint256[] public allowedTypes;\\n\\n    Order private _emptyOrder;\\n\\n    address[] public _userIndexes;\\n    mapping(address => Order[]) private _userOrders;\\n\\n    event OrderPlaced(address indexed maker, address indexed nft, uint256 indexed tokenType, uint256 amount, uint256 price);\\n    event OrderUpdated(address indexed maker, address indexed nft, uint256 indexed tokenType, uint256 price);\\n    event OrderCancelled(address indexed maker, address indexed nft, uint256 indexed tokenType, uint256 amount);\\n    event OrderFilled(address indexed maker, address indexed taker, address indexed nft, uint256 tokenType, uint256 amount, uint256 price);\\n\\n    constructor(\\n        address _feeRecipient,\\n        uint256 _feeAmount,\\n        address[] memory _tokens,\\n        address[] memory _stables,\\n        uint256[] memory _types\\n    ) public {\\n        feeRecipient = _feeRecipient;\\n        feeAmount = _feeAmount;\\n        allowedTokens = _tokens;\\n        allowedStables = _stables;\\n        allowedTypes = _types;\\n        _emptyOrder = Order(address(0), address(0), 0, 0, 0);\\n    }\\n\\n    function getOrders() public view returns (Order[] memory orders) {\\n        uint256 totalOrders = 0;\\n\\n        for (uint256 i = 0; i < _userIndexes.length; i++) {\\n            for (uint256 j = 0; j < _userOrders[_userIndexes[i]].length; j++) {\\n                if (_userOrders[_userIndexes[i]][j].amount > 0 && _userOrders[_userIndexes[i]][j].price > 0) {\\n                    totalOrders++;\\n                }\\n            }\\n        }\\n\\n        uint256 orderIndex = 0;\\n        orders = new Order[](totalOrders);\\n\\n        for (uint256 i = 0; i < _userIndexes.length; i++) {\\n            for (uint256 j = 0; j < _userOrders[_userIndexes[i]].length; j++) {\\n                if (_userOrders[_userIndexes[i]][j].amount > 0 && _userOrders[_userIndexes[i]][j].price > 0) {\\n                    orders[orderIndex] = _userOrders[_userIndexes[i]][j];\\n                    orderIndex++;\\n                }\\n            }\\n        }\\n    }\\n\\n    function getOrdersByMaker(address _maker) public view returns (Order[] memory) {\\n        return _userOrders[_maker];\\n    }\\n\\n    function placeOrder(\\n        address _nft,\\n        uint256 _tokenType,\\n        uint256 _amount,\\n        uint256 _price\\n    ) public whenNotPaused {\\n        require(_amount > 0, 'GravisTradingPost: Zero amount');\\n        require(_price > 0, 'GravisTradingPost: Zero price');\\n\\n        require(isTokenAllowed(_nft), 'GravisTradingPost: NFT not allowed');\\n        require(isTypeAllowed(_tokenType), 'GravisTradingPost: Token type not allowed');\\n\\n        require(!orderExists(_msgSender(), _nft, _tokenType), 'GravisTradingPost: Order already exists');\\n\\n        IGravisCollectible(_nft).transferFor(_msgSender(), address(this), _tokenType, _amount);\\n\\n        _userOrders[_msgSender()].push(Order(_msgSender(), _nft, _tokenType, _amount, _price));\\n\\n        // if user not in the index, push new value to the array\\n        if (!isUserExists(_msgSender())) {\\n            _userIndexes.push(_msgSender());\\n        }\\n\\n        emit OrderPlaced(_msgSender(), _nft, _tokenType, _amount, _price);\\n    }\\n\\n    function updateOrder(\\n        address _nft,\\n        uint256 _tokenType,\\n        uint256 _price\\n    ) public whenNotPaused {\\n        require(_price > 0, 'GravisTradingPost: Zero price');\\n\\n        require(isTokenAllowed(_nft), 'GravisTradingPost: NFT not allowed');\\n        require(isTypeAllowed(_tokenType), 'GravisTradingPost: Token type not allowed');\\n\\n        require(orderExists(_msgSender(), _nft, _tokenType), 'GravisTradingPost: Order not exists');\\n\\n        (Order storage order, ) = findOrder(_msgSender(), _nft, _tokenType);\\n\\n        order.price = _price;\\n\\n        emit OrderUpdated(_msgSender(), _nft, _tokenType, _price);\\n    }\\n\\n    function cancelOrder(address _nft, uint256 _tokenType) public whenNotPaused {\\n        require(isTokenAllowed(_nft), 'GravisTradingPost: NFT not allowed');\\n        require(isTypeAllowed(_tokenType), 'GravisTradingPost: Token type not allowed');\\n\\n        require(orderExists(_msgSender(), _nft, _tokenType), 'GravisTradingPost: Order not exists');\\n\\n        (Order storage order, uint256 index) = findOrder(_msgSender(), _nft, _tokenType);\\n\\n        uint256 remainingAmount = order.amount;\\n\\n        deleteOrder(_msgSender(), index);\\n\\n        // Still has the balance of NFT on the contract\\n        // Should transfer NFTs back to maker\\n        if (remainingAmount > 0) {\\n            IGravisCollectible(_nft).transferFor(address(this), _msgSender(), _tokenType, remainingAmount);\\n        }\\n\\n        emit OrderCancelled(_msgSender(), _nft, _tokenType, remainingAmount);\\n    }\\n\\n    function fillOrder(\\n        address _maker,\\n        address _nft,\\n        uint256 _tokenType,\\n        uint256 _amount,\\n        address _stable\\n    ) public whenNotPaused nonReentrant() {\\n        require(_maker != address(0), 'GravisTradingPost: Zero maker');\\n        require(_amount > 0, 'GravisTradingPost: Zero amount');\\n\\n        require(isTokenAllowed(_nft), 'GravisTradingPost: NFT not allowed');\\n        require(isTypeAllowed(_tokenType), 'GravisTradingPost: Token type not allowed');\\n        require(isStableAllowed(_stable), 'GravisTradingPost: Stable not allowed');\\n\\n        require(orderExists(_maker, _nft, _tokenType), 'GravisTradingPost: Order not exists');\\n\\n        (Order storage order, uint256 index) = findOrder(_maker, _nft, _tokenType);\\n\\n        require(order.amount >= _amount, 'GravisTradingPost: Not enough amount');\\n\\n        uint256 fullPrice = _amount.mul(order.price);\\n\\n        // Reset order if its fully filled\\n        if (order.amount == _amount) {\\n            deleteOrder(_maker, index);\\n        } else {\\n            order.amount = order.amount.sub(_amount);\\n        }\\n\\n        IERC20 stable = IERC20(_stable);\\n\\n        // Transfer fee to feeRecipient\\n        stable.safeTransferFrom(_msgSender(), feeRecipient, calculateFee(fullPrice));\\n        // Transfer stables to maker\\n        stable.safeTransferFrom(_msgSender(), _maker, applyFee(fullPrice));\\n        // Transfer NFTs to taker\\n        IGravisCollectible(_nft).transferFor(address(this), _msgSender(), _tokenType, _amount);\\n\\n        emit OrderFilled(_maker, _msgSender(), _nft, _tokenType, _amount, fullPrice);\\n    }\\n\\n    /**\\n     * @dev Change the fee paid to the protocol (owner only)\\n     * @param _fee New fee to set in basis points\\n     */\\n    function changeFee(uint256 _fee) public onlyOwner {\\n        feeAmount = _fee;\\n    }\\n\\n    /**\\n     * @dev Change the protocol fee recipient (owner only)\\n     * @param _recipient New protocol fee recipient address\\n     */\\n    function changeFeeRecipient(address _recipient) public onlyOwner {\\n        require(_recipient != address(0), 'GravisTradingPost: Zero fee recipient');\\n        feeRecipient = _recipient;\\n    }\\n\\n    /**\\n     * @dev Change the protocol allowed tokens (owner only)\\n     * @param _list Array of allowed token addresses\\n     */\\n    function changeAllowedTokens(address[] memory _list) public onlyOwner {\\n        require(_list.length > 0, 'GravisTradingPost: Zero length');\\n        allowedTokens = _list;\\n    }\\n\\n    /**\\n     * @dev Change the protocol allowed stables (owner only)\\n     * @param _list Array of allowed stable addresses\\n     */\\n    function changeAllowedStables(address[] memory _list) public onlyOwner {\\n        require(_list.length > 0, 'GravisTradingPost: Zero length');\\n        allowedStables = _list;\\n    }\\n\\n    /**\\n     * @dev Change the protocol allowed token types (owner only)\\n     * @param _list Array of allowed token types\\n     */\\n    function changeAllowedTypes(uint256[] memory _list) public onlyOwner {\\n        require(_list.length > 0, 'GravisTradingPost: Zero length');\\n        allowedTypes = _list;\\n    }\\n\\n    /**\\n     * @dev Find an order for the maker of nft type\\n     * @param _maker Address of order maker\\n     * @param _nft Address of nft token\\n     * @param _tokenType Type of nft token\\n     * @return order, and index of order\\n     */\\n    function findOrder(\\n        address _maker,\\n        address _nft,\\n        uint256 _tokenType\\n    ) internal view returns (Order storage, uint256) {\\n        Order storage order = _emptyOrder;\\n        for (uint256 i = 0; i < _userOrders[_maker].length; i++) {\\n            if (_userOrders[_maker][i].nft == _nft && _userOrders[_maker][i].tokenType == _tokenType) {\\n                return (_userOrders[_maker][i], i);\\n            }\\n        }\\n        return (order, 0);\\n    }\\n\\n    /**\\n     * @dev Delete an order at index from users orders array\\n     * @param _maker Address of order maker\\n     * @param _index Index of an order\\n     */\\n    function deleteOrder(address _maker, uint256 _index) internal {\\n        _userOrders[_maker][_index] = _userOrders[_maker][_userOrders[_maker].length - 1];\\n        _userOrders[_maker].pop();\\n    }\\n\\n    /**\\n     * @dev Check that order exists in the order list\\n     * @param _maker Address of order maker\\n     * @param _nft Address of nft token\\n     * @param _tokenType Type of nft token\\n     * @return exists\\n     */\\n    function orderExists(\\n        address _maker,\\n        address _nft,\\n        uint256 _tokenType\\n    ) internal view returns (bool exists) {\\n        (Order storage order, ) = findOrder(_maker, _nft, _tokenType);\\n        return order.price > 0 && order.amount > 0;\\n    }\\n\\n    /**\\n     * Applies the fee by subtracting fees from the amount and returns\\n     * the amount after deducting the fee.\\n     * @dev it calculates (1 - fee) * amount\\n     * @param _amount Amount to calculate the fee from\\n     */\\n    function applyFee(uint256 _amount) internal view returns (uint256) {\\n        return _amount.mul(FEE_BASE.sub(feeAmount)).div(FEE_BASE);\\n    }\\n\\n    /**\\n     * Calculates the fee amount.\\n     * @dev it calculates fee * amount\\n     * @param _amount Amount to calculate the fee from\\n     */\\n    function calculateFee(uint256 _amount) internal view returns (uint256) {\\n        return _amount.mul(feeAmount).div(FEE_BASE);\\n    }\\n\\n    /**\\n     * @dev Check that nft token is in the allowed list\\n     * @param _token Address of token\\n     */\\n    function isTokenAllowed(address _token) public view returns (bool) {\\n        for (uint256 i = 0; i < allowedTokens.length; i++) {\\n            if (allowedTokens[i] == _token) {\\n                return true;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Check that erc token is in the allowed list\\n     * @param _erc Address of token\\n     */\\n    function isStableAllowed(address _erc) public view returns (bool) {\\n        for (uint256 i = 0; i < allowedStables.length; i++) {\\n            if (allowedStables[i] == _erc) {\\n                return true;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Check that type of nft token is in the allowed list\\n     * @param _type Type of NFT token\\n     */\\n    function isTypeAllowed(uint256 _type) public view returns (bool) {\\n        for (uint256 i = 0; i < allowedTypes.length; i++) {\\n            if (allowedTypes[i] == _type) {\\n                return true;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Check that user is already in the index, i.e. placed any order\\n     * @param _user Address of user\\n     */\\n    function isUserExists(address _user) public view returns (bool) {\\n        for (uint256 i = 0; i < _userIndexes.length; i++) {\\n            if (_userIndexes[i] == _user) {\\n                return true;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Pause all activity of contract orders (owner only)\\n     */\\n    function pause() public onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause all activity of contract orders (owner only)\\n     */\\n    function unpause() public onlyOwner whenPaused {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0xa3e60101aa64e560b90c6fafde5b82690ac0cf397724295c6b7e637836520935\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IGravisCollectible.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.12;\\n\\ninterface IGravisCollectible {\\n    function transferFor(\\n        address _from,\\n        address _to,\\n        uint256 _type,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x654acb4e34002a8b18980661e87291f049a093ad44edc99613bf46d5ef7ce178\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002ca938038062002ca98339810160408190526200003491620002da565b6000620000406200015b565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506000805460ff60a01b1916905560018055600280546001600160a01b0319166001600160a01b03871617905560038490558251620000d09060049060208601906200015f565b508151620000e69060059060208501906200015f565b508051620000fc906006906020840190620001c9565b50506040805160a08101825260008082526020820181905291810182905260608101829052608001819052600780546001600160a01b03199081169091556008805490911690556009819055600a819055600b55506200044492505050565b3390565b828054828255906000526020600020908101928215620001b7579160200282015b82811115620001b757825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000180565b50620001c592915062000215565b5090565b82805482825590600052602060002090810192821562000207579160200282015b8281111562000207578251825591602001919060010190620001ea565b50620001c592915062000236565b5b80821115620001c55780546001600160a01b031916815560010162000216565b5b80821115620001c5576000815560010162000237565b600082601f8301126200025e578081fd5b8151620002756200026f826200040b565b620003e4565b8181529150602080830190848101818402860182018710156200029757600080fd5b6000805b85811015620002ce5782516001600160a01b0381168114620002bb578283fd5b855293830193918301916001016200029b565b50505050505092915050565b600080600080600060a08688031215620002f2578081fd5b8551620002ff816200042b565b60208781015160408901519297509550906001600160401b038082111562000325578384fd5b620003338a838b016200024d565b9550606089015191508082111562000349578384fd5b620003578a838b016200024d565b945060808901519150808211156200036d578384fd5b508701601f810189136200037f578283fd5b8051620003906200026f826200040b565b81815283810190838501858402850186018d1015620003ad578687fd5b8694505b83851015620003d1578051835260019490940193918501918501620003b1565b5080955050505050509295509295909350565b6040518181016001600160401b03811182821017156200040357600080fd5b604052919050565b60006001600160401b0382111562000421578081fd5b5060209081020190565b6001600160a01b03811681146200044157600080fd5b50565b61285580620004546000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636a1db1bf116101045780639dab3ccd116100a2578063f2fde38b11610071578063f2fde38b14610398578063f3847fd7146103ab578063f7f33eda146103be578063f9eaee0d146103d1576101cf565b80639dab3ccd14610357578063ae4c46c71461036a578063dcdc88e91461037d578063ecefc70514610390576101cf565b80638456cb59116100de5780638456cb59146103215780638d225c7e146103295780638da5cb5b1461033c5780638ed8d83314610344576101cf565b80636a1db1bf146102f35780636a20613714610306578063715018a614610319576101cf565b80633f4ba83a11610171578063587b0fb81161014b578063587b0fb8146102b05780635c975abb146102c35780635e5f2e26146102cb57806369e15404146102de576101cf565b80633f4ba83a1461028d5780634690484014610295578063509222cd1461029d576101cf565b806323604071116101ad57806323604071146102325780632e2dc43e146102455780633d5c57011461025a5780633ed9cdcd1461026d576101cf565b80630ec25de4146101d4578063150b7a02146101fd57806317dbb3891461021d575b600080fd5b6101e76101e2366004611dbf565b6103e4565b6040516101f491906121d5565b60405180910390f35b61021061020b366004611dda565b61043d565b6040516101f491906121e0565b61023061022b366004611f85565b61044d565b005b610230610240366004611dbf565b6104cd565b61024d610554565b6040516101f4919061215b565b61024d610268366004611dbf565b6108a1565b61028061027b3660046120c6565b610950565b6040516101f491906120fa565b610230610977565b6102806109e4565b6101e76102ab366004611dbf565b6109f3565b6102306102be366004611e90565b610a45565b6101e7610d11565b6102806102d93660046120c6565b610d21565b6102e6610d2e565b6040516101f49190612767565b6102306103013660046120c6565b610d34565b610230610314366004611eee565b610d78565b610230610f11565b610230610f9a565b6102806103373660046120c6565b611006565b610280611013565b6101e76103523660046120c6565b611022565b6102e66103653660046120c6565b611061565b610230610378366004611f85565b61107f565b61023061038b366004612022565b6110f2565b6102e6611165565b6102306103a6366004611dbf565b61116b565b6102306103b9366004611f4b565b61122b565b6102306103cc366004611f18565b6114e9565b6101e76103df366004611dbf565b611608565b6000805b60055481101561043657826001600160a01b03166005828154811061040957fe5b6000918252602090912001546001600160a01b0316141561042e576001915050610438565b6001016103e8565b505b919050565b630a85bd0160e11b949350505050565b61045561165a565b6001600160a01b0316610466611013565b6001600160a01b0316146104955760405162461bcd60e51b815260040161048c90612582565b60405180910390fd5b60008151116104b65760405162461bcd60e51b815260040161048c906125fe565b80516104c9906004906020840190611c87565b5050565b6104d561165a565b6001600160a01b03166104e6611013565b6001600160a01b03161461050c5760405162461bcd60e51b815260040161048c90612582565b6001600160a01b0381166105325760405162461bcd60e51b815260040161048c90612490565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60606000805b600c548110156106755760005b600d6000600c848154811061057857fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205481101561066c576000600d6000600c85815481106105b757fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190208054839081106105e757fe5b90600052602060002090600502016003015411801561065857506000600d6000600c858154811061061457fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902080548390811061064457fe5b906000526020600020906005020160040154115b15610664576001909201915b600101610567565b5060010161055a565b5060008167ffffffffffffffff8111801561068f57600080fd5b506040519080825280602002602001820160405280156106c957816020015b6106b6611cec565b8152602001906001900390816106ae5790505b50925060005b600c5481101561089b5760005b600d6000600c84815481106106ed57fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902054811015610892576000600d6000600c858154811061072c57fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902080548390811061075c57fe5b9060005260206000209060050201600301541180156107cd57506000600d6000600c858154811061078957fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190208054839081106107b957fe5b906000526020600020906005020160040154115b1561088a57600d6000600c84815481106107e357fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902080548290811061081357fe5b60009182526020918290206040805160a081018252600590930290910180546001600160a01b03908116845260018201541693830193909352600283015490820152600382015460608201526004909101546080820152855186908590811061087857fe5b60209081029190910101526001909201915b6001016106dc565b506001016106cf565b50505090565b6001600160a01b0381166000908152600d60209081526040808320805482518185028101850190935280835260609492939192909184015b828210156109455760008481526020908190206040805160a0810182526005860290920180546001600160a01b039081168452600180830154909116848601526002820154928401929092526003810154606084015260040154608083015290835290920191016108d9565b505050509050919050565b6005818154811061095d57fe5b6000918252602090912001546001600160a01b0316905081565b61097f61165a565b6001600160a01b0316610990611013565b6001600160a01b0316146109b65760405162461bcd60e51b815260040161048c90612582565b6109be610d11565b6109da5760405162461bcd60e51b815260040161048c90612228565b6109e261165e565b565b6002546001600160a01b031681565b6000805b600c5481101561043657826001600160a01b0316600c8281548110610a1857fe5b6000918252602090912001546001600160a01b03161415610a3d576001915050610438565b6001016109f7565b610a4d610d11565b15610a6a5760405162461bcd60e51b815260040161048c906124d5565b60026001541415610a8d5760405162461bcd60e51b815260040161048c906126f9565b60026001556001600160a01b038516610ab85760405162461bcd60e51b815260040161048c90612730565b60008211610ad85760405162461bcd60e51b815260040161048c906123a5565b610ae184611608565b610afd5760405162461bcd60e51b815260040161048c906124ff565b610b0683611022565b610b225760405162461bcd60e51b815260040161048c90612317565b610b2b816103e4565b610b475760405162461bcd60e51b815260040161048c90612360565b610b528585856116cf565b610b6e5760405162461bcd60e51b815260040161048c9061266c565b600080610b7c878787611703565b915091508382600301541015610ba45760405162461bcd60e51b815260040161048c906122d3565b6000610bbd83600401548661180e90919063ffffffff16565b90508483600301541415610bda57610bd58883611851565b610bef565b6003830154610be99086611977565b60038401555b83610c22610bfb61165a565b6002546001600160a01b0316610c108561199f565b6001600160a01b0385169291906119c2565b610c37610c2d61165a565b8a610c1085611a20565b876001600160a01b0316633ee9f8bb30610c4f61165a565b8a8a6040518563ffffffff1660e01b8152600401610c70949392919061210e565b600060405180830381600087803b158015610c8a57600080fd5b505af1158015610c9e573d6000803e3d6000fd5b50505050876001600160a01b0316610cb461165a565b6001600160a01b03168a6001600160a01b03167f6126bf0743f21056038e3d5b010ad0303b2f08c4073871f159ce7f49d0a68d428a8a87604051610cfa9392919061277e565b60405180910390a450506001805550505050505050565b600054600160a01b900460ff1690565b6004818154811061095d57fe5b60035481565b610d3c61165a565b6001600160a01b0316610d4d611013565b6001600160a01b031614610d735760405162461bcd60e51b815260040161048c90612582565b600355565b610d80610d11565b15610d9d5760405162461bcd60e51b815260040161048c906124d5565b610da682611608565b610dc25760405162461bcd60e51b815260040161048c906124ff565b610dcb81611022565b610de75760405162461bcd60e51b815260040161048c90612317565b610df9610df261165a565b83836116cf565b610e155760405162461bcd60e51b815260040161048c9061266c565b600080610e2a610e2361165a565b8585611703565b60038201549193509150610e45610e3f61165a565b83611851565b8015610eb757846001600160a01b0316633ee9f8bb30610e6361165a565b87856040518563ffffffff1660e01b8152600401610e84949392919061210e565b600060405180830381600087803b158015610e9e57600080fd5b505af1158015610eb2573d6000803e3d6000fd5b505050505b83856001600160a01b0316610eca61165a565b6001600160a01b03167fdfdc8e23bf47bd8b72643392fb1484e25a8b28fe2f1e310ec0e4d4badb303fbc84604051610f029190612767565b60405180910390a45050505050565b610f1961165a565b6001600160a01b0316610f2a611013565b6001600160a01b031614610f505760405162461bcd60e51b815260040161048c90612582565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b610fa261165a565b6001600160a01b0316610fb3611013565b6001600160a01b031614610fd95760405162461bcd60e51b815260040161048c90612582565b610fe1610d11565b15610ffe5760405162461bcd60e51b815260040161048c906124d5565b6109e2611a49565b600c818154811061095d57fe5b6000546001600160a01b031690565b6000805b60065481101561043657826006828154811061103e57fe5b90600052602060002001541415611059576001915050610438565b600101611026565b6006818154811061106e57fe5b600091825260209091200154905081565b61108761165a565b6001600160a01b0316611098611013565b6001600160a01b0316146110be5760405162461bcd60e51b815260040161048c90612582565b60008151116110df5760405162461bcd60e51b815260040161048c906125fe565b80516104c9906005906020840190611c87565b6110fa61165a565b6001600160a01b031661110b611013565b6001600160a01b0316146111315760405162461bcd60e51b815260040161048c90612582565b60008151116111525760405162461bcd60e51b815260040161048c906125fe565b80516104c9906006906020840190611d2d565b61271081565b61117361165a565b6001600160a01b0316611184611013565b6001600160a01b0316146111aa5760405162461bcd60e51b815260040161048c90612582565b6001600160a01b0381166111d05760405162461bcd60e51b815260040161048c9061228d565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b611233610d11565b156112505760405162461bcd60e51b815260040161048c906124d5565b600082116112705760405162461bcd60e51b815260040161048c906123a5565b600081116112905760405162461bcd60e51b815260040161048c90612256565b61129984611608565b6112b55760405162461bcd60e51b815260040161048c906124ff565b6112be83611022565b6112da5760405162461bcd60e51b815260040161048c90612317565b6112ec6112e561165a565b85856116cf565b156113095760405162461bcd60e51b815260040161048c906125b7565b836001600160a01b0316633ee9f8bb61132061165a565b3086866040518563ffffffff1660e01b8152600401611342949392919061210e565b600060405180830381600087803b15801561135c57600080fd5b505af1158015611370573d6000803e3d6000fd5b50505050600d600061138061165a565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518060a001604052806113b361165a565b6001600160a01b039081168252878116602080840191909152604080840189905260608085018990526080948501889052865460018181018955600098895297849020875160059092020180549186166001600160a01b031992831617815593870151978401805498909516971696909617909255908301516002820155928201516003840155015160049091015561144d6102ab61165a565b61148e57600c61145b61165a565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b039092169190911790555b82846001600160a01b03166114a161165a565b6001600160a01b03167f966afa01eced24bc818c52a7c8f7ea7a2423a043d3d96baacfbc9c3c2c7a80cd85856040516114db929190612770565b60405180910390a450505050565b6114f1610d11565b1561150e5760405162461bcd60e51b815260040161048c906124d5565b6000811161152e5760405162461bcd60e51b815260040161048c90612256565b61153783611608565b6115535760405162461bcd60e51b815260040161048c906124ff565b61155c82611022565b6115785760405162461bcd60e51b815260040161048c90612317565b61158a61158361165a565b84846116cf565b6115a65760405162461bcd60e51b815260040161048c9061266c565b60006115b3610e2361165a565b50600481018390559050826001600160a01b0385166115d061165a565b6001600160a01b03167fb96a2189ad29c78b8386e0c269a44b24ad4db52c3e22536f9cd07736e4200ca4856040516114db9190612767565b6000805b60045481101561043657826001600160a01b03166004828154811061162d57fe5b6000918252602090912001546001600160a01b03161415611652576001915050610438565b60010161160c565b3390565b611666610d11565b6116825760405162461bcd60e51b815260040161048c90612228565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6116b861165a565b6040516116c591906120fa565b60405180910390a1565b6000806116dd858585611703565b509050600081600401541180156116f8575060008160030154115b9150505b9392505050565b6000806007815b6001600160a01b0387166000908152600d60205260409020548110156117fe576001600160a01b038781166000908152600d602052604090208054918816918390811061175357fe5b60009182526020909120600160059092020101546001600160a01b03161480156117b357506001600160a01b0387166000908152600d6020526040902080548691908390811061179f57fe5b906000526020600020906005020160020154145b156117f6576001600160a01b0387166000908152600d602052604090208054829081106117dc57fe5b906000526020600020906005020181935093505050611806565b60010161170a565b509150600090505b935093915050565b60008261181d5750600061184b565b8282028284828161182a57fe5b04146118485760405162461bcd60e51b815260040161048c90612541565b90505b92915050565b6001600160a01b0382166000908152600d602052604090208054600019810190811061187957fe5b9060005260206000209060050201600d6000846001600160a01b03166001600160a01b0316815260200190815260200160002082815481106118b757fe5b60009182526020808320845460059093020180546001600160a01b03199081166001600160a01b039485161782556001808701549083018054909216908516179055600280860154908201556003808601549082015560049485015494019390935584168152600d9091526040902080548061192f57fe5b60008281526020812060056000199093019283020180546001600160a01b03199081168255600182018054909116905560028101829055600381018290556004015590555050565b6000828211156119995760405162461bcd60e51b815260040161048c906123dc565b50900390565b600061184b6127106119bc6003548561180e90919063ffffffff16565b90611aaa565b611a1a846323b872dd60e01b8585856040516024016119e393929190612137565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611adc565b50505050565b600061184b6127106119bc611a4260035461271061197790919063ffffffff16565b859061180e565b611a51610d11565b15611a6e5760405162461bcd60e51b815260040161048c906124d5565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116b861165a565b6000808211611acb5760405162461bcd60e51b815260040161048c90612459565b818381611ad457fe5b049392505050565b6060611b31826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b709092919063ffffffff16565b805190915015611b6b5780806020019051810190611b4f91906120a6565b611b6b5760405162461bcd60e51b815260040161048c906126af565b505050565b6060611b7f8484600085611b87565b949350505050565b606082471015611ba95760405162461bcd60e51b815260040161048c90612413565b611bb285611c48565b611bce5760405162461bcd60e51b815260040161048c90612635565b60006060866001600160a01b03168587604051611beb91906120de565b60006040518083038185875af1925050503d8060008114611c28576040519150601f19603f3d011682016040523d82523d6000602084013e611c2d565b606091505b5091509150611c3d828286611c4e565b979650505050505050565b3b151590565b60608315611c5d5750816116fc565b825115611c6d5782518084602001fd5b8160405162461bcd60e51b815260040161048c91906121f5565b828054828255906000526020600020908101928215611cdc579160200282015b82811115611cdc57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611ca7565b50611ce8929150611d74565b5090565b6040518060a0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b828054828255906000526020600020908101928215611d68579160200282015b82811115611d68578251825591602001919060010190611d4d565b50611ce8929150611d93565b5b80821115611ce85780546001600160a01b0319168155600101611d75565b5b80821115611ce85760008155600101611d94565b80356001600160a01b038116811461184b57600080fd5b600060208284031215611dd0578081fd5b6116fc8383611da8565b60008060008060808587031215611def578283fd5b611df98686611da8565b93506020611e0987828801611da8565b935060408601359250606086013567ffffffffffffffff80821115611e2c578384fd5b818801915088601f830112611e3f578384fd5b813581811115611e4d578485fd5b611e5f601f8201601f19168501612794565b91508082528984828501011115611e74578485fd5b8084840185840137810190920192909252939692955090935050565b600080600080600060a08688031215611ea7578081fd5b8535611eb281612807565b94506020860135611ec281612807565b935060408601359250606086013591506080860135611ee081612807565b809150509295509295909350565b60008060408385031215611f00578182fd5b611f0a8484611da8565b946020939093013593505050565b600080600060608486031215611f2c578283fd5b611f368585611da8565b95602085013595506040909401359392505050565b60008060008060808587031215611f60578384fd5b8435611f6b81612807565b966020860135965060408601359560600135945092505050565b60006020808385031215611f97578182fd5b823567ffffffffffffffff811115611fad578283fd5b8301601f81018513611fbd578283fd5b8035611fd0611fcb826127bb565b612794565b8181528381019083850185840285018601891015611fec578687fd5b8694505b83851015612016576120028982611da8565b835260019490940193918501918501611ff0565b50979650505050505050565b60006020808385031215612034578182fd5b823567ffffffffffffffff81111561204a578283fd5b8301601f8101851361205a578283fd5b8035612068611fcb826127bb565b8181528381019083850185840285018601891015612084578687fd5b8694505b83851015612016578035835260019490940193918501918501612088565b6000602082840312156120b7578081fd5b81518015158114611848578182fd5b6000602082840312156120d7578081fd5b5035919050565b600082516120f08184602087016127db565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b602080825282518282018190526000919060409081850190868401855b828110156121c857815180516001600160a01b0390811686528782015116878601528581015186860152606080820151908601526080908101519085015260a09093019290850190600101612178565b5091979650505050505050565b901515815260200190565b6001600160e01b031991909116815260200190565b60006020825282518060208401526122148160408501602087016127db565b601f01601f19169190910160400192915050565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252601d908201527f47726176697354726164696e67506f73743a205a65726f207072696365000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526024908201527f47726176697354726164696e67506f73743a204e6f7420656e6f75676820616d6040820152631bdd5b9d60e21b606082015260800190565b60208082526029908201527f47726176697354726164696e67506f73743a20546f6b656e2074797065206e6f6040820152681d08185b1b1bddd95960ba1b606082015260800190565b60208082526025908201527f47726176697354726164696e67506f73743a20537461626c65206e6f7420616c6040820152641b1bddd95960da1b606082015260800190565b6020808252601e908201527f47726176697354726164696e67506f73743a205a65726f20616d6f756e740000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526025908201527f47726176697354726164696e67506f73743a205a65726f2066656520726563696040820152641c1a595b9d60da1b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526022908201527f47726176697354726164696e67506f73743a204e4654206e6f7420616c6c6f77604082015261195960f21b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526027908201527f47726176697354726164696e67506f73743a204f7264657220616c72656164796040820152662065786973747360c81b606082015260800190565b6020808252601e908201527f47726176697354726164696e67506f73743a205a65726f206c656e6774680000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526023908201527f47726176697354726164696e67506f73743a204f72646572206e6f742065786960408201526273747360e81b606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601d908201527f47726176697354726164696e67506f73743a205a65726f206d616b6572000000604082015260600190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff811182821017156127b357600080fd5b604052919050565b600067ffffffffffffffff8211156127d1578081fd5b5060209081020190565b60005b838110156127f65781810151838201526020016127de565b83811115611a1a5750506000910152565b6001600160a01b038116811461281c57600080fd5b5056fea2646970667358221220e41dddffe19c5567da02bf1f8f650776dda9e3fd1c1aa4653fce0569b6f957ae64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636a1db1bf116101045780639dab3ccd116100a2578063f2fde38b11610071578063f2fde38b14610398578063f3847fd7146103ab578063f7f33eda146103be578063f9eaee0d146103d1576101cf565b80639dab3ccd14610357578063ae4c46c71461036a578063dcdc88e91461037d578063ecefc70514610390576101cf565b80638456cb59116100de5780638456cb59146103215780638d225c7e146103295780638da5cb5b1461033c5780638ed8d83314610344576101cf565b80636a1db1bf146102f35780636a20613714610306578063715018a614610319576101cf565b80633f4ba83a11610171578063587b0fb81161014b578063587b0fb8146102b05780635c975abb146102c35780635e5f2e26146102cb57806369e15404146102de576101cf565b80633f4ba83a1461028d5780634690484014610295578063509222cd1461029d576101cf565b806323604071116101ad57806323604071146102325780632e2dc43e146102455780633d5c57011461025a5780633ed9cdcd1461026d576101cf565b80630ec25de4146101d4578063150b7a02146101fd57806317dbb3891461021d575b600080fd5b6101e76101e2366004611dbf565b6103e4565b6040516101f491906121d5565b60405180910390f35b61021061020b366004611dda565b61043d565b6040516101f491906121e0565b61023061022b366004611f85565b61044d565b005b610230610240366004611dbf565b6104cd565b61024d610554565b6040516101f4919061215b565b61024d610268366004611dbf565b6108a1565b61028061027b3660046120c6565b610950565b6040516101f491906120fa565b610230610977565b6102806109e4565b6101e76102ab366004611dbf565b6109f3565b6102306102be366004611e90565b610a45565b6101e7610d11565b6102806102d93660046120c6565b610d21565b6102e6610d2e565b6040516101f49190612767565b6102306103013660046120c6565b610d34565b610230610314366004611eee565b610d78565b610230610f11565b610230610f9a565b6102806103373660046120c6565b611006565b610280611013565b6101e76103523660046120c6565b611022565b6102e66103653660046120c6565b611061565b610230610378366004611f85565b61107f565b61023061038b366004612022565b6110f2565b6102e6611165565b6102306103a6366004611dbf565b61116b565b6102306103b9366004611f4b565b61122b565b6102306103cc366004611f18565b6114e9565b6101e76103df366004611dbf565b611608565b6000805b60055481101561043657826001600160a01b03166005828154811061040957fe5b6000918252602090912001546001600160a01b0316141561042e576001915050610438565b6001016103e8565b505b919050565b630a85bd0160e11b949350505050565b61045561165a565b6001600160a01b0316610466611013565b6001600160a01b0316146104955760405162461bcd60e51b815260040161048c90612582565b60405180910390fd5b60008151116104b65760405162461bcd60e51b815260040161048c906125fe565b80516104c9906004906020840190611c87565b5050565b6104d561165a565b6001600160a01b03166104e6611013565b6001600160a01b03161461050c5760405162461bcd60e51b815260040161048c90612582565b6001600160a01b0381166105325760405162461bcd60e51b815260040161048c90612490565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60606000805b600c548110156106755760005b600d6000600c848154811061057857fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205481101561066c576000600d6000600c85815481106105b757fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190208054839081106105e757fe5b90600052602060002090600502016003015411801561065857506000600d6000600c858154811061061457fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902080548390811061064457fe5b906000526020600020906005020160040154115b15610664576001909201915b600101610567565b5060010161055a565b5060008167ffffffffffffffff8111801561068f57600080fd5b506040519080825280602002602001820160405280156106c957816020015b6106b6611cec565b8152602001906001900390816106ae5790505b50925060005b600c5481101561089b5760005b600d6000600c84815481106106ed57fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902054811015610892576000600d6000600c858154811061072c57fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902080548390811061075c57fe5b9060005260206000209060050201600301541180156107cd57506000600d6000600c858154811061078957fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190208054839081106107b957fe5b906000526020600020906005020160040154115b1561088a57600d6000600c84815481106107e357fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902080548290811061081357fe5b60009182526020918290206040805160a081018252600590930290910180546001600160a01b03908116845260018201541693830193909352600283015490820152600382015460608201526004909101546080820152855186908590811061087857fe5b60209081029190910101526001909201915b6001016106dc565b506001016106cf565b50505090565b6001600160a01b0381166000908152600d60209081526040808320805482518185028101850190935280835260609492939192909184015b828210156109455760008481526020908190206040805160a0810182526005860290920180546001600160a01b039081168452600180830154909116848601526002820154928401929092526003810154606084015260040154608083015290835290920191016108d9565b505050509050919050565b6005818154811061095d57fe5b6000918252602090912001546001600160a01b0316905081565b61097f61165a565b6001600160a01b0316610990611013565b6001600160a01b0316146109b65760405162461bcd60e51b815260040161048c90612582565b6109be610d11565b6109da5760405162461bcd60e51b815260040161048c90612228565b6109e261165e565b565b6002546001600160a01b031681565b6000805b600c5481101561043657826001600160a01b0316600c8281548110610a1857fe5b6000918252602090912001546001600160a01b03161415610a3d576001915050610438565b6001016109f7565b610a4d610d11565b15610a6a5760405162461bcd60e51b815260040161048c906124d5565b60026001541415610a8d5760405162461bcd60e51b815260040161048c906126f9565b60026001556001600160a01b038516610ab85760405162461bcd60e51b815260040161048c90612730565b60008211610ad85760405162461bcd60e51b815260040161048c906123a5565b610ae184611608565b610afd5760405162461bcd60e51b815260040161048c906124ff565b610b0683611022565b610b225760405162461bcd60e51b815260040161048c90612317565b610b2b816103e4565b610b475760405162461bcd60e51b815260040161048c90612360565b610b528585856116cf565b610b6e5760405162461bcd60e51b815260040161048c9061266c565b600080610b7c878787611703565b915091508382600301541015610ba45760405162461bcd60e51b815260040161048c906122d3565b6000610bbd83600401548661180e90919063ffffffff16565b90508483600301541415610bda57610bd58883611851565b610bef565b6003830154610be99086611977565b60038401555b83610c22610bfb61165a565b6002546001600160a01b0316610c108561199f565b6001600160a01b0385169291906119c2565b610c37610c2d61165a565b8a610c1085611a20565b876001600160a01b0316633ee9f8bb30610c4f61165a565b8a8a6040518563ffffffff1660e01b8152600401610c70949392919061210e565b600060405180830381600087803b158015610c8a57600080fd5b505af1158015610c9e573d6000803e3d6000fd5b50505050876001600160a01b0316610cb461165a565b6001600160a01b03168a6001600160a01b03167f6126bf0743f21056038e3d5b010ad0303b2f08c4073871f159ce7f49d0a68d428a8a87604051610cfa9392919061277e565b60405180910390a450506001805550505050505050565b600054600160a01b900460ff1690565b6004818154811061095d57fe5b60035481565b610d3c61165a565b6001600160a01b0316610d4d611013565b6001600160a01b031614610d735760405162461bcd60e51b815260040161048c90612582565b600355565b610d80610d11565b15610d9d5760405162461bcd60e51b815260040161048c906124d5565b610da682611608565b610dc25760405162461bcd60e51b815260040161048c906124ff565b610dcb81611022565b610de75760405162461bcd60e51b815260040161048c90612317565b610df9610df261165a565b83836116cf565b610e155760405162461bcd60e51b815260040161048c9061266c565b600080610e2a610e2361165a565b8585611703565b60038201549193509150610e45610e3f61165a565b83611851565b8015610eb757846001600160a01b0316633ee9f8bb30610e6361165a565b87856040518563ffffffff1660e01b8152600401610e84949392919061210e565b600060405180830381600087803b158015610e9e57600080fd5b505af1158015610eb2573d6000803e3d6000fd5b505050505b83856001600160a01b0316610eca61165a565b6001600160a01b03167fdfdc8e23bf47bd8b72643392fb1484e25a8b28fe2f1e310ec0e4d4badb303fbc84604051610f029190612767565b60405180910390a45050505050565b610f1961165a565b6001600160a01b0316610f2a611013565b6001600160a01b031614610f505760405162461bcd60e51b815260040161048c90612582565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b610fa261165a565b6001600160a01b0316610fb3611013565b6001600160a01b031614610fd95760405162461bcd60e51b815260040161048c90612582565b610fe1610d11565b15610ffe5760405162461bcd60e51b815260040161048c906124d5565b6109e2611a49565b600c818154811061095d57fe5b6000546001600160a01b031690565b6000805b60065481101561043657826006828154811061103e57fe5b90600052602060002001541415611059576001915050610438565b600101611026565b6006818154811061106e57fe5b600091825260209091200154905081565b61108761165a565b6001600160a01b0316611098611013565b6001600160a01b0316146110be5760405162461bcd60e51b815260040161048c90612582565b60008151116110df5760405162461bcd60e51b815260040161048c906125fe565b80516104c9906005906020840190611c87565b6110fa61165a565b6001600160a01b031661110b611013565b6001600160a01b0316146111315760405162461bcd60e51b815260040161048c90612582565b60008151116111525760405162461bcd60e51b815260040161048c906125fe565b80516104c9906006906020840190611d2d565b61271081565b61117361165a565b6001600160a01b0316611184611013565b6001600160a01b0316146111aa5760405162461bcd60e51b815260040161048c90612582565b6001600160a01b0381166111d05760405162461bcd60e51b815260040161048c9061228d565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b611233610d11565b156112505760405162461bcd60e51b815260040161048c906124d5565b600082116112705760405162461bcd60e51b815260040161048c906123a5565b600081116112905760405162461bcd60e51b815260040161048c90612256565b61129984611608565b6112b55760405162461bcd60e51b815260040161048c906124ff565b6112be83611022565b6112da5760405162461bcd60e51b815260040161048c90612317565b6112ec6112e561165a565b85856116cf565b156113095760405162461bcd60e51b815260040161048c906125b7565b836001600160a01b0316633ee9f8bb61132061165a565b3086866040518563ffffffff1660e01b8152600401611342949392919061210e565b600060405180830381600087803b15801561135c57600080fd5b505af1158015611370573d6000803e3d6000fd5b50505050600d600061138061165a565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518060a001604052806113b361165a565b6001600160a01b039081168252878116602080840191909152604080840189905260608085018990526080948501889052865460018181018955600098895297849020875160059092020180549186166001600160a01b031992831617815593870151978401805498909516971696909617909255908301516002820155928201516003840155015160049091015561144d6102ab61165a565b61148e57600c61145b61165a565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b039092169190911790555b82846001600160a01b03166114a161165a565b6001600160a01b03167f966afa01eced24bc818c52a7c8f7ea7a2423a043d3d96baacfbc9c3c2c7a80cd85856040516114db929190612770565b60405180910390a450505050565b6114f1610d11565b1561150e5760405162461bcd60e51b815260040161048c906124d5565b6000811161152e5760405162461bcd60e51b815260040161048c90612256565b61153783611608565b6115535760405162461bcd60e51b815260040161048c906124ff565b61155c82611022565b6115785760405162461bcd60e51b815260040161048c90612317565b61158a61158361165a565b84846116cf565b6115a65760405162461bcd60e51b815260040161048c9061266c565b60006115b3610e2361165a565b50600481018390559050826001600160a01b0385166115d061165a565b6001600160a01b03167fb96a2189ad29c78b8386e0c269a44b24ad4db52c3e22536f9cd07736e4200ca4856040516114db9190612767565b6000805b60045481101561043657826001600160a01b03166004828154811061162d57fe5b6000918252602090912001546001600160a01b03161415611652576001915050610438565b60010161160c565b3390565b611666610d11565b6116825760405162461bcd60e51b815260040161048c90612228565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6116b861165a565b6040516116c591906120fa565b60405180910390a1565b6000806116dd858585611703565b509050600081600401541180156116f8575060008160030154115b9150505b9392505050565b6000806007815b6001600160a01b0387166000908152600d60205260409020548110156117fe576001600160a01b038781166000908152600d602052604090208054918816918390811061175357fe5b60009182526020909120600160059092020101546001600160a01b03161480156117b357506001600160a01b0387166000908152600d6020526040902080548691908390811061179f57fe5b906000526020600020906005020160020154145b156117f6576001600160a01b0387166000908152600d602052604090208054829081106117dc57fe5b906000526020600020906005020181935093505050611806565b60010161170a565b509150600090505b935093915050565b60008261181d5750600061184b565b8282028284828161182a57fe5b04146118485760405162461bcd60e51b815260040161048c90612541565b90505b92915050565b6001600160a01b0382166000908152600d602052604090208054600019810190811061187957fe5b9060005260206000209060050201600d6000846001600160a01b03166001600160a01b0316815260200190815260200160002082815481106118b757fe5b60009182526020808320845460059093020180546001600160a01b03199081166001600160a01b039485161782556001808701549083018054909216908516179055600280860154908201556003808601549082015560049485015494019390935584168152600d9091526040902080548061192f57fe5b60008281526020812060056000199093019283020180546001600160a01b03199081168255600182018054909116905560028101829055600381018290556004015590555050565b6000828211156119995760405162461bcd60e51b815260040161048c906123dc565b50900390565b600061184b6127106119bc6003548561180e90919063ffffffff16565b90611aaa565b611a1a846323b872dd60e01b8585856040516024016119e393929190612137565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611adc565b50505050565b600061184b6127106119bc611a4260035461271061197790919063ffffffff16565b859061180e565b611a51610d11565b15611a6e5760405162461bcd60e51b815260040161048c906124d5565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116b861165a565b6000808211611acb5760405162461bcd60e51b815260040161048c90612459565b818381611ad457fe5b049392505050565b6060611b31826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b709092919063ffffffff16565b805190915015611b6b5780806020019051810190611b4f91906120a6565b611b6b5760405162461bcd60e51b815260040161048c906126af565b505050565b6060611b7f8484600085611b87565b949350505050565b606082471015611ba95760405162461bcd60e51b815260040161048c90612413565b611bb285611c48565b611bce5760405162461bcd60e51b815260040161048c90612635565b60006060866001600160a01b03168587604051611beb91906120de565b60006040518083038185875af1925050503d8060008114611c28576040519150601f19603f3d011682016040523d82523d6000602084013e611c2d565b606091505b5091509150611c3d828286611c4e565b979650505050505050565b3b151590565b60608315611c5d5750816116fc565b825115611c6d5782518084602001fd5b8160405162461bcd60e51b815260040161048c91906121f5565b828054828255906000526020600020908101928215611cdc579160200282015b82811115611cdc57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611ca7565b50611ce8929150611d74565b5090565b6040518060a0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b828054828255906000526020600020908101928215611d68579160200282015b82811115611d68578251825591602001919060010190611d4d565b50611ce8929150611d93565b5b80821115611ce85780546001600160a01b0319168155600101611d75565b5b80821115611ce85760008155600101611d94565b80356001600160a01b038116811461184b57600080fd5b600060208284031215611dd0578081fd5b6116fc8383611da8565b60008060008060808587031215611def578283fd5b611df98686611da8565b93506020611e0987828801611da8565b935060408601359250606086013567ffffffffffffffff80821115611e2c578384fd5b818801915088601f830112611e3f578384fd5b813581811115611e4d578485fd5b611e5f601f8201601f19168501612794565b91508082528984828501011115611e74578485fd5b8084840185840137810190920192909252939692955090935050565b600080600080600060a08688031215611ea7578081fd5b8535611eb281612807565b94506020860135611ec281612807565b935060408601359250606086013591506080860135611ee081612807565b809150509295509295909350565b60008060408385031215611f00578182fd5b611f0a8484611da8565b946020939093013593505050565b600080600060608486031215611f2c578283fd5b611f368585611da8565b95602085013595506040909401359392505050565b60008060008060808587031215611f60578384fd5b8435611f6b81612807565b966020860135965060408601359560600135945092505050565b60006020808385031215611f97578182fd5b823567ffffffffffffffff811115611fad578283fd5b8301601f81018513611fbd578283fd5b8035611fd0611fcb826127bb565b612794565b8181528381019083850185840285018601891015611fec578687fd5b8694505b83851015612016576120028982611da8565b835260019490940193918501918501611ff0565b50979650505050505050565b60006020808385031215612034578182fd5b823567ffffffffffffffff81111561204a578283fd5b8301601f8101851361205a578283fd5b8035612068611fcb826127bb565b8181528381019083850185840285018601891015612084578687fd5b8694505b83851015612016578035835260019490940193918501918501612088565b6000602082840312156120b7578081fd5b81518015158114611848578182fd5b6000602082840312156120d7578081fd5b5035919050565b600082516120f08184602087016127db565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b602080825282518282018190526000919060409081850190868401855b828110156121c857815180516001600160a01b0390811686528782015116878601528581015186860152606080820151908601526080908101519085015260a09093019290850190600101612178565b5091979650505050505050565b901515815260200190565b6001600160e01b031991909116815260200190565b60006020825282518060208401526122148160408501602087016127db565b601f01601f19169190910160400192915050565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252601d908201527f47726176697354726164696e67506f73743a205a65726f207072696365000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526024908201527f47726176697354726164696e67506f73743a204e6f7420656e6f75676820616d6040820152631bdd5b9d60e21b606082015260800190565b60208082526029908201527f47726176697354726164696e67506f73743a20546f6b656e2074797065206e6f6040820152681d08185b1b1bddd95960ba1b606082015260800190565b60208082526025908201527f47726176697354726164696e67506f73743a20537461626c65206e6f7420616c6040820152641b1bddd95960da1b606082015260800190565b6020808252601e908201527f47726176697354726164696e67506f73743a205a65726f20616d6f756e740000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526025908201527f47726176697354726164696e67506f73743a205a65726f2066656520726563696040820152641c1a595b9d60da1b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526022908201527f47726176697354726164696e67506f73743a204e4654206e6f7420616c6c6f77604082015261195960f21b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526027908201527f47726176697354726164696e67506f73743a204f7264657220616c72656164796040820152662065786973747360c81b606082015260800190565b6020808252601e908201527f47726176697354726164696e67506f73743a205a65726f206c656e6774680000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526023908201527f47726176697354726164696e67506f73743a204f72646572206e6f742065786960408201526273747360e81b606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601d908201527f47726176697354726164696e67506f73743a205a65726f206d616b6572000000604082015260600190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff811182821017156127b357600080fd5b604052919050565b600067ffffffffffffffff8211156127d1578081fd5b5060209081020190565b60005b838110156127f65781810151838201526020016127de565b83811115611a1a5750506000910152565b6001600160a01b038116811461281c57600080fd5b5056fea2646970667358221220e41dddffe19c5567da02bf1f8f650776dda9e3fd1c1aa4653fce0569b6f957ae64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changeAllowedStables(address[])": {
        "details": "Change the protocol allowed stables (owner only)",
        "params": {
          "_list": "Array of allowed stable addresses"
        }
      },
      "changeAllowedTokens(address[])": {
        "details": "Change the protocol allowed tokens (owner only)",
        "params": {
          "_list": "Array of allowed token addresses"
        }
      },
      "changeAllowedTypes(uint256[])": {
        "details": "Change the protocol allowed token types (owner only)",
        "params": {
          "_list": "Array of allowed token types"
        }
      },
      "changeFee(uint256)": {
        "details": "Change the fee paid to the protocol (owner only)",
        "params": {
          "_fee": "New fee to set in basis points"
        }
      },
      "changeFeeRecipient(address)": {
        "details": "Change the protocol fee recipient (owner only)",
        "params": {
          "_recipient": "New protocol fee recipient address"
        }
      },
      "isStableAllowed(address)": {
        "details": "Check that erc token is in the allowed list",
        "params": {
          "_erc": "Address of token"
        }
      },
      "isTokenAllowed(address)": {
        "details": "Check that nft token is in the allowed list",
        "params": {
          "_token": "Address of token"
        }
      },
      "isTypeAllowed(uint256)": {
        "details": "Check that type of nft token is in the allowed list",
        "params": {
          "_type": "Type of NFT token"
        }
      },
      "isUserExists(address)": {
        "details": "Check that user is already in the index, i.e. placed any order",
        "params": {
          "_user": "Address of user"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pause all activity of contract orders (owner only)"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpause all activity of contract orders (owner only)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 290,
        "contract": "contracts/GravisTradingPost.sol:GravisTradingPost",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2658,
        "contract": "contracts/GravisTradingPost.sol:GravisTradingPost",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2743,
        "contract": "contracts/GravisTradingPost.sol:GravisTradingPost",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2802,
        "contract": "contracts/GravisTradingPost.sol:GravisTradingPost",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2804,
        "contract": "contracts/GravisTradingPost.sol:GravisTradingPost",
        "label": "feeAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2818,
        "contract": "contracts/GravisTradingPost.sol:GravisTradingPost",
        "label": "allowedTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2821,
        "contract": "contracts/GravisTradingPost.sol:GravisTradingPost",
        "label": "allowedStables",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2824,
        "contract": "contracts/GravisTradingPost.sol:GravisTradingPost",
        "label": "allowedTypes",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2826,
        "contract": "contracts/GravisTradingPost.sol:GravisTradingPost",
        "label": "_emptyOrder",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Order)2815_storage"
      },
      {
        "astId": 2829,
        "contract": "contracts/GravisTradingPost.sol:GravisTradingPost",
        "label": "_userIndexes",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2834,
        "contract": "contracts/GravisTradingPost.sol:GravisTradingPost",
        "label": "_userOrders",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_array(t_struct(Order)2815_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Order)2815_storage)dyn_storage": {
        "base": "t_struct(Order)2815_storage",
        "encoding": "dynamic_array",
        "label": "struct GravisTradingPost.Order[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(Order)2815_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GravisTradingPost.Order[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Order)2815_storage)dyn_storage"
      },
      "t_struct(Order)2815_storage": {
        "encoding": "inplace",
        "label": "struct GravisTradingPost.Order",
        "members": [
          {
            "astId": 2806,
            "contract": "contracts/GravisTradingPost.sol:GravisTradingPost",
            "label": "maker",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2808,
            "contract": "contracts/GravisTradingPost.sol:GravisTradingPost",
            "label": "nft",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2810,
            "contract": "contracts/GravisTradingPost.sol:GravisTradingPost",
            "label": "tokenType",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2812,
            "contract": "contracts/GravisTradingPost.sol:GravisTradingPost",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2814,
            "contract": "contracts/GravisTradingPost.sol:GravisTradingPost",
            "label": "price",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}